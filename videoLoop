#!/usr/bin/python
import subprocess
import pipes
import sys
import os
from datetime import datetime , timedelta

current_dir = os.getcwd()
list_file_path = os.path.join( current_dir , "list.txt" )
print list_file_path

def try_exec( cmd ):
	output = False
	try:
		output = subprocess.check_output( [ cmd ] , shell=True )
	except Exception as e:
		print e
	return output


sourceFile = os.path.abspath( sys.argv[ 1 ] )# cut.mp4
sourceFile = pipes.quote( sourceFile )
ceiling = sys.argv[ 2 ] # "MM:MM:SS.000"

ceiling = ceiling.split( "." )
ch , cm, cs = ceiling[ 0 ].split( ":" )
ceiling_time_delta = timedelta( hours=int( ch ) , minutes=int( cm ) , seconds=int( cs ) , milliseconds=int( ceiling[ 1 ][ :3 ] ) )

#1.) Get Duration of Source
duration = try_exec( "ffprobe -i " + sourceFile + " -sexagesimal -show_entries format=duration -v quiet -of csv='p=0'" )
if duration == False:
	sys.exit( 1 )
else:
	duration = duration.strip().split( "." )
#print duration
dh , dm, ds = duration[ 0 ].split( ":" )
#print dh , dm  , ds , duration[ 1 ][ :3 ]
duration_time_delta = timedelta( hours=int( dh ) , minutes=int( dm ) , seconds=int( ds ) , milliseconds=int( duration[ 1 ][ :3 ] ) )
print( "Duration == " + str( duration_time_delta ) )

#2.) Calculate Number of Source Videos Needed for Requested Time Duration
total = timedelta( hours=0 , minutes=0 , seconds=0 , milliseconds=0 )
count = 1
while total < ceiling_time_delta:
	#print( str( total ) )
	count += 1
	total += duration_time_delta


#3.) Join Everything
print( "Count == " + str( count ) )
print( "Total Loop Time == " + str( total ) )
list_string = "".join( map( lambda x: "file '" + sys.argv[ 1 ] + "'\n" , range( 1 , count ) ) )
text_file = open( list_file_path , "w+" )
text_file.write( list_string )
text_file.close()
output_file_path = os.path.abspath( os.path.join( current_dir , "looped-" + ch + "-" + cm + "-" + cs +".mp4" ) )
output_file_path = pipes.quote( output_file_path )
print output_file_path
try_exec( "ffmpeg -v quiet -stats -f concat -i " + pipes.quote( list_file_path ) + " -c copy " + output_file_path )
try_exec( "rm " + pipes.quote( list_file_path ) )