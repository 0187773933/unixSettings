#!/usr/bin/python

from time import time
import sys
import praw
import json
import distutils.dir_util
from os import path
from collections import defaultdict

homeFolder = path.expanduser( "~" )
backupFolder = path.join( homeFolder , "BACKUP" , "Reddit" )
savePath = path.join( backupFolder , "036.json" )
distutils.dir_util.mkpath( backupFolder )

saveMaster = { "comments": {} , "saved": {} , "upvoted": {} , "submissions": {}  }
try:
	with open( savePath ) as f:
		saveMaster = json.loads( f.read() )
except:
	pass

REDDIT_USERNAME = ""
REDDIT_PASSWORD = ""
CLIENT_ID = ""
CLIENT_SECRET = ""

def login():
	reddit = praw.Reddit( client_id=CLIENT_ID ,
						 client_secret=CLIENT_SECRET ,
						 user_agent="export saved 2.0" ,
						 username=REDDIT_USERNAME ,
						 password=REDDIT_PASSWORD )
	return reddit

reddit_url = "https://reddit.com"
def process( reddit , seq , section , folder_name ):
	global saveMaster
	print( "Processing --> " + section )
	# filter items for link
	for idx, i in enumerate( seq , 1 ):
		if not hasattr( i , "title" ):
			i.title = i.link_title

		try:
			created = int( i.created )
		except ValueError:
			created = 0

		try:
			subreddit = str( i.subreddit ).encode( "utf-8" ).decode( "utf-8" )
		except AttributeError:
			subreddit = "None"

		if callable(i.permalink):
			permalink = i.permalink()
		else:
			permalink = i.permalink

		title = i.title.encode( "utf-8" )
		id = permalink.split( "comments/" )[ 1 ].split( "/" )
		id.pop()
		post_id = id[ 0 ]

		if subreddit not in saveMaster[ section ]:
			saveMaster[ section ][ subreddit ] = { "links": {} , "comments": {} }

		if len( id ) == 3: # Comments
			if post_id not in saveMaster[ section ][ subreddit ][ "comments" ]:
				saveMaster[ section ][ subreddit ][ "comments" ][ post_id ] = {}
			if id[ 2 ] not in saveMaster[ section ][ subreddit ][ "comments" ][ post_id ]:
				print( "PostID = " + post_id + " ||==|| CommentID = " + id[ 2 ] )
				saveMaster[ section ][ subreddit ][ "comments" ][ post_id ][ id[ 2 ] ] = { "url": reddit_url + permalink , "title": title , "created": created }
		else: # Links
			if post_id not in saveMaster[ section ][ subreddit ][ "links" ]:
				print( "PostID = " + post_id )
				saveMaster[ section ][ subreddit ][ "links" ][ post_id ] = { "url": reddit_url + permalink , "title": title , "created": created }


def save_upvoted( reddit ):
	""" save upvoted posts """
	seq = reddit.user.me().upvoted( limit=None )
	process( reddit , seq , "upvoted" , "Reddit - Upvoted" )

def save_saved( reddit ):
	""" save saved posts """
	seq = reddit.user.me().saved( limit=None )
	process( reddit , seq , "saved" , "Reddit - Saved" )


def save_comments( reddit ):
	""" save comments posts """
	seq = reddit.user.me().comments.new( limit=None )
	process( reddit , seq , "comments" , "Reddit - Comments" )

def save_submissions( reddit ):
	""" save saved posts """
	seq = reddit.user.me().submissions.new( limit=None )
	process( reddit , seq , "submissions" , "Reddit - Submissions" )


def main():

	reddit = login()
	save_upvoted(reddit)
	save_saved(reddit)
	save_submissions(reddit)
	save_comments(reddit)

	try:
		with open( savePath , "w+" ) as outfile:
			json.dump( saveMaster , outfile )
		print( "Saving to --> " + savePath )
	except:
		print( "Failed To Save" )

	sys.exit(0)


if __name__ == "__main__":
	main()
